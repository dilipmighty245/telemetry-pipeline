# Makefile for Process-based E2E Integration Tests

.PHONY: help test-process test-process-verbose test-process-short clean-test-data setup-test-env

# Default target
help:
	@echo "Available targets:"
	@echo "  test-process        - Run process-based E2E integration tests"
	@echo "  test-process-verbose - Run process-based E2E tests with verbose output"
	@echo "  test-process-short  - Run process-based E2E tests in short mode (skips E2E)"
	@echo "  setup-test-env      - Set up test environment (install dependencies)"
	@echo "  clean-test-data     - Clean up test data and containers"
	@echo "  help               - Show this help message"

# Run process-based E2E integration tests
test-process:
	@echo "Running process-based E2E integration tests..."
	@cd ../.. && go test -tags=integration -run TestProcessE2ETestSuite ./test/integration/

# Run process-based E2E tests with verbose output
test-process-verbose:
	@echo "Running process-based E2E integration tests (verbose)..."
	@cd ../.. && go test -tags=integration -v -run TestProcessE2ETestSuite ./test/integration/

# Run process-based E2E tests in short mode (will skip E2E tests)
test-process-short:
	@echo "Running tests in short mode (E2E tests will be skipped)..."
	@cd ../.. && go test -tags=integration -short -run TestProcessE2ETestSuite ./test/integration/

# Set up test environment
setup-test-env:
	@echo "Setting up test environment..."
	@which docker > /dev/null || (echo "Docker is required but not installed. Please install Docker." && exit 1)
	@which docker-compose > /dev/null || (echo "Docker Compose is required but not installed. Please install Docker Compose." && exit 1)
	@echo "Test environment is ready!"

# Clean up test data and containers
clean-test-data:
	@echo "Cleaning up test data and containers..."
	@docker-compose -f docker-compose.test.yml down -v 2>/dev/null || true
	@docker system prune -f --volumes 2>/dev/null || true
	@rm -rf /tmp/telemetry-process-e2e-test-* 2>/dev/null || true
	@echo "Cleanup completed!"

# Run all integration tests (including existing ones)
test-all:
	@echo "Running all integration tests..."
	@cd ../.. && go test -tags=integration ./test/integration/

# Run specific test
test-specific:
	@echo "Usage: make test-specific TEST=TestProcessHealthEndpoints"
	@if [ -z "$(TEST)" ]; then \
		echo "Please specify TEST variable, e.g., make test-specific TEST=TestProcessHealthEndpoints"; \
		exit 1; \
	fi
	@cd ../.. && go test -tags=integration -run $(TEST) ./test/integration/

# Build all services (for debugging)
build-services:
	@echo "Building all services..."
	@cd ../.. && go build -o bin/nexus-streamer ./cmd/nexus-streamer/
	@cd ../.. && go build -o bin/nexus-collector ./cmd/nexus-collector/
	@cd ../.. && go build -o bin/nexus-gateway ./cmd/nexus-gateway/
	@echo "Services built in bin/ directory"

# Check test coverage
test-coverage:
	@echo "Running tests with coverage..."
	@cd ../.. && go test -tags=integration -coverprofile=coverage.out ./test/integration/
	@cd ../.. && go tool cover -html=coverage.out -o coverage.html
	@echo "Coverage report generated: coverage.html"

# Run tests with race detection
test-race:
	@echo "Running tests with race detection..."
	@cd ../.. && go test -tags=integration -race -run TestProcessE2ETestSuite ./test/integration/

# Benchmark tests
test-benchmark:
	@echo "Running benchmark tests..."
	@cd ../.. && go test -tags=integration -bench=. -run=^$$ ./test/integration/

# Check for test dependencies
check-deps:
	@echo "Checking test dependencies..."
	@cd ../.. && go mod tidy
	@cd ../.. && go mod verify
	@echo "Dependencies are up to date!"

# Start etcd for manual testing
start-etcd:
	@echo "Starting etcd for manual testing..."
	@docker-compose -f docker-compose.test.yml up -d etcd
	@echo "etcd is running on localhost:12379"

# Stop etcd
stop-etcd:
	@echo "Stopping etcd..."
	@docker-compose -f docker-compose.test.yml down
	@echo "etcd stopped"

# Show etcd logs
etcd-logs:
	@docker-compose -f docker-compose.test.yml logs -f etcd

# Run tests in CI mode (with timeout and no interactive features)
test-ci:
	@echo "Running tests in CI mode..."
	@cd ../.. && timeout 10m go test -tags=integration -timeout=10m -run TestProcessE2ETestSuite ./test/integration/

# Debug: show test environment
debug-env:
	@echo "Test Environment Information:"
	@echo "  Go version: $(shell go version)"
	@echo "  Docker version: $(shell docker --version 2>/dev/null || echo 'Not installed')"
	@echo "  Docker Compose version: $(shell docker-compose --version 2>/dev/null || echo 'Not installed')"
	@echo "  Current directory: $(shell pwd)"
	@echo "  Project root: $(shell cd ../.. && pwd)"
	@echo "  Available tests:"
	@cd ../.. && go test -tags=integration -list=Test ./test/integration/ | grep -E "^Test"

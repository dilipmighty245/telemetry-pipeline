# Test Configuration for Telemetry Pipeline Integration Tests
# This file contains configuration settings for running comprehensive E2E tests

test_environment:
  # etcd Configuration
  etcd:
    endpoints: ["localhost:12379"]
    version: "v3.5.10"
    client_port: 12379
    peer_port: 12380
    container_name: "telemetry-etcd-test"
    data_dir: "/etcd-data"
    timeout: 60s

  # Service Configuration
  services:
    cluster_id: "test-cluster"
    streamer:
      id: "test-streamer-1"
      port: 8081
      batch_size: 5
      stream_interval: "1s"
      upload_dir: "/tmp/telemetry-test-uploads"
      max_upload_size: 104857600  # 100MB
      max_memory: 33554432       # 32MB
    
    collector:
      id: "test-collector-1"
      batch_size: 5
      poll_interval: "1s"
      workers: 2
    
    gateway:
      port: 8080
      enable_graphql: true
      enable_websocket: true
      enable_cors: true

  # Logging Configuration
  logging:
    level: "info"
    verbose_output: true

# Test Configuration
test_settings:
  # General Test Settings
  timeout: "10m"
  short_mode: false
  
  # Coverage Settings
  coverage:
    threshold: 80.0
    output_file: "integration_coverage.out"
    html_file: "integration_coverage.html"
    unit_output_file: "unit_coverage.out"
    unit_html_file: "unit_coverage.html"
    
    # Package-specific thresholds
    package_thresholds:
      critical: 70.0  # pkg/config, pkg/messagequeue, internal/nexus
      standard: 50.0  # other packages
      integration_contribution: 30.0

  # Test Data Configuration
  test_data:
    csv_records: 10
    hosts: 2
    gpus_per_host: 3
    sample_csv_file: "test_telemetry.csv"
    
    # Sample telemetry data structure
    telemetry_fields:
      - "timestamp"
      - "gpu_id"
      - "uuid"
      - "device"
      - "modelName"
      - "Hostname"
      - "gpu_utilization"
      - "memory_utilization"
      - "memory_used_mb"
      - "memory_free_mb"
      - "temperature"
      - "power_draw"
      - "sm_clock_mhz"
      - "memory_clock_mhz"

  # Performance Test Configuration
  performance:
    concurrent_requests: 10
    test_duration: "30s"
    load_test_rps: 100
    response_time_threshold: "100ms"
    memory_threshold: "512MB"
    cpu_threshold: "80%"

# Test Scenarios
test_scenarios:
  # Health Check Tests
  health_checks:
    - name: "streamer_health"
      endpoint: "/health"
      expected_status: 200
      expected_fields: ["status", "service", "cluster_id"]
    
    - name: "gateway_health"
      endpoint: "/health"
      expected_status: 200
      expected_fields: ["status", "cluster_id", "timestamp"]

  # API Endpoint Tests
  api_endpoints:
    - name: "list_gpus"
      method: "GET"
      path: "/api/v1/gpus"
      expected_status: 200
      expected_fields: ["success", "data", "count"]
    
    - name: "list_hosts"
      method: "GET"
      path: "/api/v1/hosts"
      expected_status: 200
      expected_fields: ["success", "data", "count"]
    
    - name: "list_clusters"
      method: "GET"
      path: "/api/v1/clusters"
      expected_status: 200
      expected_fields: ["clusters", "count"]
    
    - name: "get_cluster"
      method: "GET"
      path: "/api/v1/clusters/{cluster_id}"
      expected_status: 200
      expected_fields: ["cluster_id", "cluster_name"]
    
    - name: "gpu_telemetry"
      method: "GET"
      path: "/api/v1/gpus/{gpu_uuid}/telemetry"
      query_params:
        limit: 5
      expected_status: 200
      expected_fields: ["success", "data", "count"]

  # GraphQL Tests
  graphql_queries:
    - name: "cluster_info"
      query: |
        {
          clusters {
            id
            name
            totalHosts
            totalGPUs
          }
        }
      expected_fields: ["data"]
    
    - name: "telemetry_data"
      query: |
        {
          telemetry {
            timestamp
            hostId
            gpuId
            gpuUtilization
            memoryUtilization
            temperature
          }
        }
      expected_fields: ["data"]

  # Error Handling Tests
  error_scenarios:
    - name: "non_existent_gpu"
      method: "GET"
      path: "/api/v1/gpus/non-existent-gpu/telemetry"
      expected_status: 200
      expected_count: 0
    
    - name: "non_existent_cluster"
      method: "GET"
      path: "/api/v1/clusters/non-existent-cluster"
      expected_status: 404
    
    - name: "invalid_graphql"
      method: "POST"
      path: "/graphql"
      body:
        query: "{ invalidField { nonExistentField } }"
      expected_errors: true

# Docker Configuration
docker:
  compose_file: "docker-compose.test.yml"
  services:
    - "etcd"
  
  # Container health checks
  health_checks:
    etcd:
      command: ["etcdctl", "endpoint", "health"]
      interval: "10s"
      timeout: "5s"
      retries: 5
      start_period: "30s"

# CI/CD Configuration
ci_cd:
  # GitHub Actions integration
  github_actions:
    go_version: "1.23"
    timeout: "15m"
    upload_coverage: true
    artifact_retention: "30d"
  
  # Pipeline stages
  stages:
    - name: "prerequisites"
      commands: ["check-deps"]
    - name: "setup"
      commands: ["setup-test-env"]
    - name: "build"
      commands: ["build-services"]
    - name: "test"
      commands: ["test-all"]
    - name: "coverage"
      commands: ["verify-coverage"]
    - name: "cleanup"
      commands: ["cleanup-test-env"]

# Monitoring and Observability
monitoring:
  # Metrics to collect during tests
  metrics:
    - "test_duration"
    - "api_response_times"
    - "memory_usage"
    - "cpu_usage"
    - "etcd_operations"
    - "message_queue_throughput"
  
  # Alerts and thresholds
  alerts:
    test_timeout: "10m"
    memory_leak: "1GB"
    high_error_rate: "5%"
    slow_response: "1s"

# Cleanup Configuration
cleanup:
  # What to clean up after tests
  artifacts:
    - "*.out"
    - "*.html"
    - "test-data/"
    - "bin/"
    - "uploads/"
  
  # Docker cleanup
  docker_cleanup:
    containers: true
    volumes: true
    networks: true
    images: false  # Keep images for faster subsequent runs
